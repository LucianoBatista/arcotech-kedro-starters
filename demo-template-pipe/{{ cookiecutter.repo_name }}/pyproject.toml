[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ cookiecutter.python_package }}"
description = "{{ cookiecutter.project_desc }}"
readme = "README.md"
dynamic = ["version"]
requires-python = ">=3.12"
dependencies = [
    "arize>=7.36.0",
    "arize-otel>=0.8.0",
    "dvc-s3>=3.2.0",
    "mkdocs-glightbox>=0.4.0",
    "mkdocs-material>=9.6.11",
    "pandas~=2.2.3",
    "polars~=1.27",
    "seaborn~=0.13.2",
    "ipython>=7.0.0,<9.0",
    "jupyterlab~=4.4.0",
    "notebook~=7.4.0",
    "kedro[jupyter]==0.19.12",
    "kedro-datasets[pandas, matplotlib, polars, plotly-plotlydataset, plotly-jsondataset] == 6.0.0",
    "kedro-viz==11.0.1",
    "ipykernel~=6.29.5",
    "pre-commit~=4.2.0",
    "pytest-cov~=3.0",
    "pytest-mock~=3.14",
    "pytest~=8.3.5",
    "ruff~=0.11.6",
    "toposort>=1.10",
]

[project.scripts]
"{{ cookiecutter.repo_name }}" = "{{ cookiecutter.python_package }}.__main__:main"

[project.entry-points."kedro.hooks"]

[tool.setuptools.dynamic]
version = {attr = "{{ cookiecutter.python_package }}.__version__"}

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.kedro]
package_name = "{{ cookiecutter.python_package }}"
project_name = "{{ cookiecutter.project_name }}"
kedro_init_version = "{{ cookiecutter.kedro_version }}"
tools = "{{ cookiecutter.tools | default('') | string | replace('\"', '\\\"') }}"
example_pipeline = "{{ cookiecutter.example_pipeline }}"
source_dir = "src"

[tool.pytest.ini_options]
addopts = """
--cov-report term-missing \
--cov src/{{ cookiecutter.python_package }} -ra"""

[tool.coverage.report]
fail_under = 0
show_missing = true
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
